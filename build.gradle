import java.text.SimpleDateFormat

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'java-library'
    id "org.sonarqube" version "3.4.0.2513"
    id 'net.nemerosa.versioning' version '3.0.0'
}

def version = "4.4.6"

project.group = 'com.spinyowl'
project.version = version;
processResources {
    filesMatching('**/version.properties') {
        filteringCharset = 'UTF-8'
        expand "version_major": version.major,
                "version_minor": version.minor,
                "version_patch": version.patch,
                "version_revision": versioning.info.build,
                "version_full": project.version
    }
}

printProjectInfo()

idea { module { downloadJavadoc = true; downloadSources = true } }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://raw.githubusercontent.com/SpinyOwl/repo/releases" }
}

dependencies {
    // https://mvnrepository.com/artifact/org.reflections/reflections
    api group: 'org.reflections', name: 'reflections', version: '0.10.2'

    //@formatter:off
    api group: "org.joml", name: "joml", version: joml_version
    api group: 'commons-io', name: 'commons-io', version: commons_io
    api group: 'org.apache.commons', name: 'commons-lang3', version: commons_version, changing: false
    api group: 'org.apache.commons', name: 'commons-collections4', version: commons_collections, changing: false
    api group: 'com.google.guava', name: 'guava', version: guava_version, changing: false

    // https://mvnrepository.com/artifact/com.squareup.moshi/moshi
    api group: 'com.squareup.moshi', name: 'moshi', version: '1.13.0'

    api("com.spinyowl:cbchain:${cbchain_version}") {
        exclude group: 'org.lwjgl'
    }

    api group: 'org.lwjgl', name: 'lwjgl-stb', version: lwjgl_version
    api group: 'org.lwjgl', name: 'lwjgl-glfw', version: lwjgl_version
    api group: 'org.lwjgl', name: 'lwjgl-nanovg', version: lwjgl_version
    api group: 'org.lwjgl', name: 'lwjgl-opengl', version: lwjgl_version
    api group: 'org.lwjgl', name: 'lwjgl', version: lwjgl_version
    api group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version

    def classifiers = ["natives-windows", "natives-linux", "natives-macos"]
    for (c in classifiers) {
        api group: 'org.lwjgl', name: 'lwjgl-stb', version: lwjgl_version, classifier: c
        api group: 'org.lwjgl', name: 'lwjgl-glfw', version: lwjgl_version, classifier: c
        api group: 'org.lwjgl', name: 'lwjgl-nanovg', version: lwjgl_version, classifier: c
        api group: 'org.lwjgl', name: 'lwjgl-opengl', version: lwjgl_version, classifier: c
        api group: 'org.lwjgl', name: 'lwjgl', version: lwjgl_version, classifier: c
        api group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: c
    }
    //@formatter:on

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

// PUBLISH SECTION
java {
    withJavadocJar()
    withSourcesJar()
    modularity.inferModulePath = true
}

jar {
    exclude("com/spinyowl/legui/demo/**")
    manifest.attributes('Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Revision': versioning.info.commit,
            'Created-By': "Gradle ${gradle.gradleVersion}",
            'Build-Jdk': "${System.properties.getProperty('java.version')} (${System.properties.getProperty('java.vendor')} ${System.properties.getProperty('java.vm.version')})",
            'Build-OS': "${System.properties.getProperty('os.name')} ${System.properties.getProperty('os.arch')} ${System.properties.getProperty('os.version')}",
            'Full-Version': project.version)
}



publishing {
    repositories {
        maven {
            name = "EstrilionPackages"
            url = uri("https://maven.pkg.github.com/Estrilion/rep")
            credentials {
                username = System.getenv("estrilion_user")
                password = System.getenv("estrilion_token")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            groupId = 'com.spinyowl'
            artifactId = 'legui'
            version = version
        }
    }
}


// SONARQUBE CONFIGURATION
def sonarLogin = System.getProperty("sonarLogin") ?: System.getenv("sonarLogin") ?: null
sonarqube {
    properties {
        property "sonar.projectKey", "SpinyOwl_legui"
        property "sonar.organization", "spinyowl"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", sonarLogin
    }
}

// utility methods
private void printProjectInfo() {
    println "##################################################"
    println "# Project info:                                  #"
    println sprintf("#     group:    %-33s#", project.group)
    println sprintf("#     name:     %-33s#", project.name)
    println sprintf("#     version:  %-33s#", project.version)
    println "##################################################"
}

